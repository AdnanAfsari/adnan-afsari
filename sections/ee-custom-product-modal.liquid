<style>
  input {
    all: unset;
  }
  #select-one {
    border-radius: 0;
    width: 100%;
    padding: 11px;
    text-align: center;
    border-color: black;
  }

  #select-one:active,
  #select-one:focus,
  #select-one:hover {
    border-radius: 0;
    outline: none;
    {% comment %} border: none; {% endcomment %}
     box-shadow: none;
  }
  #custom-modal {
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.5);
  }

  .custom-modal-content {
    background-color: #fefefe;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    padding: 36px 17px 17px 17px;
    width: 90%;
    max-height: 447px;
    max-width: 311px;
    font-size: 14px;
  }

  .modal-content-header {
    display: flex;
    gap: 8px;
  }

  .modal-right {
    flex: 1;
  }
  .modal-right h2 {
    font-size: 16px;
    font-weight: 300;
    margin-top: 11px;
  }

  .modal-right .money {
    margin-top: -5px;
  }

  .modal-right p {
    font-size: 14px;
    font-weight: 200;
    margin: 0;
    margin-top: 10px;
    letter-spacing: -0.6px;
    line-height: 1.1;

    overflow: hidden;
    display: -webkit-box;
    -webkit-line-clamp: 5;
    line-clamp: 5;
    -webkit-box-orient: vertical;
  }

  .modal-left {
    width: 120px;
  }

  .modal-left img {
    width: 120px;
    height: 140px;
  }

  .color-varient-container {
    display: flex;
  }

  .color-varient-btn {
    flex: 1;
    border: 1px solid black;
    height: 40px;
    position: relative;
    color: black;
  }

  .color-varient-btn::before {
    content: ' ';
    position: absolute;
    top: 0;
    left: 0px;
    height: 100%;
    width: 6px;
    background: var(--bubble-color);
    z-index: 99;
    border-right: 1px solid black;
  }

  .color-varient-btn .checkmark {
    position: absolute;
    top: 50%;
    left: 20px;
    transform: translateY(-50%);
    transition: color 0.3s linear 0.05s;
  }

  .switch-input-varient:checked ~ .checkmark {
    color: white;
    z-index: 999;
  }

  .switch-input-varient {
    cursor: pointer;
    height: 100%;
    width: 100%;
    padding: 0 !important;
    margin: 0 !important;
    z-index: 9;
    position: relative;

    -webkit-transform: translateZ(0);
    transform: translateZ(0);
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    -moz-osx-font-smoothing: grayscale;
    -webkit-transition-property: color;
    transition-property: color;
    -webkit-transition-duration: 0.5s;
    transition-duration: 0.5s;
  }

  .switch-input-varient::before {
    content: ' ';
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    background: transparent;
    z-index: 0;
    z-index: -1;
    right: 0;
    bottom: 0;
    -webkit-transform: scaleX(0);
    transform: scaleX(0);
    -webkit-transform-origin: 0 50%;
    transform-origin: 0 50%;
    -webkit-transition-property: transform;
    transition-property: transform;
    -webkit-transition-duration: 0.5s;
    transition-duration: 0.5s;
    -webkit-transition-timing-function: ease-out;
    transition-timing-function: ease-out;
  }

  .switch-input-varient:checked:before {
    background: black;
    -webkit-transform: scaleX(1);
    transform: scaleX(1);
  }

  .custom-close-modal {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;

    position: absolute;
    right: 12px;
    top: -4px;
  }

  .custom-close-modal:hover,
  .custom-close-modal:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
  }

  .shopify-section-template--21946272514334__image_banner {
    display: none;
  }

  #addToCartButton {
    margin-top: 51px;
    position: relative;
    max-width: 100%;
    max-height: 44px;
    padding: 7px 18px 7px 41px;
    display: flex;
    align-items: center;
    column-gap: 20px;
    text-transform: uppercase;
    text-decoration: none;
    -webkit-transform: translateZ(0);
    transform: translateZ(0);
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    -moz-osx-font-smoothing: grayscale;
    -webkit-transition-property: color;
    transition-property: color;
    -webkit-transition-duration: .5s;
    transition-duration: .5s;
    background: #000;
    color: #fff;
  }
</style>

<div
  class="section-id"
  id="modal-section"
  data-section="{{ section.id }}"
  style="display: none;"
>
  <div id="custom-modal" class="custom-modal">
    <div class="custom-modal-content">
      <span class="custom-close-modal">&times;</span>

      <div class="modal-content-header">
        <!-- custom-close-modal Button -->

        <div class="modal-left">
          {{ product.featured_image | image_url: width: 300 | image_tag }}
        </div>

        <div class="modal-right">
          <h2>{{ product.title }}</h2>
          <p class="money">{{ product.price | money }}</p>
          <div class="modal-rt">
            <p>{{ product.description }}</p>
          </div>
        </div>
      </div>

      <div class="modal-content-bottom">
        {% if product.variants.size > 1 %}
          {% if product.options[1] %}
            {% assign used = '' %}
            <label for="select-two">{{ product.options[1] }}</label>
            <div class="color-varient-container">
              {% for variant in product.variants %}
                {% unless used contains variant.option2 %}
                  <div class="color-varient-btn" style="--bubble-color: {{variant.option2 | downcase}};">
                    <input
                      id="select-two"
                      value="{{ variant.option2 }}"
                      type="radio"
                      class="switch-input-varient"
                      name="switch-toggle"
                    >
                    <span class="checkmark">{{ variant.option2 }}</span>
                  </div>
                  {% capture used %}{{ used }} {{ variant.option2 }}{% endcapture %}
                {% endunless %}
              {% endfor %}
            </div>
          {% endif %}
          {% if product.options[0] %}
            {% assign used = '' %}
            <label for="select-one">{{ product.options[0] }}</label>
            <div class="custom-select">
              <select id="select-one">
                <option value="" selected disabled hidden>Choose your size</option>
                {% for variant in product.variants %}
                  {% unless used contains variant.option1 %}
                    <option value="{{ variant.option1 }}">{{ variant.option1 }}</option>
                    {% capture used %}{{ used }} {{ variant.option1 }}{% endcapture %}
                  {% endunless %}
                {% endfor %}
              </select>
            </div>
          {% endif %}

          {% if product.options[2] %}
            {% assign used = '' %}
            <label for="select-one">{{ product.options[2] }}</label>
            <select id="select-three">
              {% for variant in product.variants %}
                {% unless used contains variant.option3 %}
                  <option value="{{ variant.option3 }}">{{ variant.option3 }}</option>
                  {% capture used %}{{ used }} {{ variant.option3 }}{% endcapture %}
                {% endunless %}
              {% endfor %}
            </select>
          {% endif %}
        {% endif %}
        <input type="hidden" name="id" id="product-select" value="{{ product.variants.first.id }}">
      </div>

      <div class="modal-rb">
        <input
          type="hidden"
          name="id"
          id="get_product_id"
          value="{{ product.variants.first.id }}"
        >
        <button
          id="addToCartButton"
          class="button-primary button-black"
          style="max-width: 100%; width:100%;"
        >
          Add to Cart
          {%- liquid
            render 'arrow-icon'
          %}
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  let product = null; // will be filled by product JSON fetch

  window.addEventListener('load', () => {
    async function openModal(html, shouldShow) {
      if (shouldShow) {
        const modalSection = document.querySelector('#modal-section');
        if (modalSection) modalSection.outerHTML = html;
      }

      const modal = document.getElementById('custom-modal');
      const closeButton = document.querySelector('.custom-close-modal');
      const modalSection = document.querySelector('#modal-section');

      if (!modal || !closeButton || !modalSection) return;

      modalSection.style.display = 'block';
      modal.style.position = 'fixed';

      function closeModal() {
        modal.style.display = 'none';
        modal.style.position = 'static';
      }

      closeButton.addEventListener('click', closeModal);
      window.addEventListener('click', (event) => {
        if (event.target === modal || event.target === closeButton) {
          closeModal();
        }
      });
    }

    document.addEventListener('click', async (event) => {
      const quickViewBtn = event.target.closest('.modal-selector-quick-view');
      const addBtn = event.target.closest('#addToCartButton');

      // A) Quick view button clicked
      if (quickViewBtn) {
        const targetData = quickViewBtn.dataset.target;

        // 1. Fetch section HTML
        const response = await fetch(`/products/${targetData}?section_id={{ section.id }}`);
        const productMarkup = await response.text();
        await openModal(productMarkup, true);

        // 2. Fetch product JSON
        const productResponse = await fetch(`/products/${targetData}.json`);
        const productObject = await productResponse.json();
        product = productObject.product;

        // 3. Attach listeners for variant selectors inside modal
        attachVariantListeners();
      }

      // B) Add to Cart button clicked
      if (addBtn) {
        const id = document.querySelector("#get_product_id")?.value;
        if (!id) return;

        const formData = { items: [{ id, quantity: 1 }] };

        try {
            const res = await fetch(`${window.Shopify.routes.root}cart/add.js`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(formData),
            });

            if (!res.ok) throw new Error("Cart add failed");

            let shouldRedirect = true;

            if (typeof checkInCart === "function") {
            shouldRedirect = await checkInCart();
            }

            if (shouldRedirect) {
            window.location.href = "/cart";
            } else {
            console.log("Specific item not in cart → staying on page");
            this.querySelector("#custom-modal").style.display = "none";
            }
        } catch (err) {
            console.error("Add to Cart Error:", err);
        }
      }
    });
  });

  async function checkInCart() {
    try {
        let response = await fetch(`${window.Shopify.routes.root}cart.js`);
        let data = await response.json();
        let cartItems = data.items;

        // look for specific variant in cart
        let hasTarget = cartItems.some(opt => opt.variant_title === "M / Black");

        if (hasTarget) {
        // if found, add the gift item
        let formData = {
            items: [
            {
                id: 53528680661160, // gift variant id
                quantity: 1,
            },
            ],
        };

        let res = await fetch(`${window.Shopify.routes.root}cart/add.js`, {
            method: "POST",
            headers: {
            "Content-Type": "application/json",
            },
            body: JSON.stringify(formData),
        });

        if (!res.ok) throw new Error("Failed to add gift item");

        console.log("Gift item added to cart");
        return true; // ✅ tell addToCart to redirect
        }

        return false; // no matching item found
    } catch (error) {
        console.error("Error in checkInCart:", error);
        return false;
    }
  }
  /* Keep product variant ID in sync with option selections */
  function updateVariant() {
    if (!product) return;

    let opt1 = null, opt2 = null, opt3 = null;

    if (product.options[0]) {
      opt1 = document.getElementById('select-one')?.value;
    }
    if (product.options[1]) {
      const colorVariants = document.querySelectorAll('.switch-input-varient');
      colorVariants.forEach((opt) => {
        if (opt.checked) opt2 = opt.value;
      });
    }
    if (product.options[2]) {
      const thirdSelect = document.getElementById('select-three');
      if (thirdSelect) opt3 = thirdSelect.value;
    }

    let matchedId = '';

    for (const v of product.variants) {
      const conditions = [
        !opt1 || opt1 == v.option1,
        !opt2 || opt2 == v.option2,
        !opt3 || opt3 == v.option3,
      ];
      if (conditions.every(Boolean)) {
        matchedId = v.id;
        break;
      }
    }

    const hiddenInput = document.getElementById('get_product_id');
    if (hiddenInput) hiddenInput.value = matchedId;
  }

  /*Attach listeners so variant updates happen automatically*/
  function attachVariantListeners() {
    // Dropdowns (select elements)
    document.querySelectorAll('select[id^="select-"]').forEach((select) => {
      select.addEventListener('change', updateVariant);
    });

    // Radio buttons / color swatches
    document.querySelectorAll('.switch-input-varient').forEach((radio) => {
      radio.addEventListener('change', updateVariant);
    });

    // Run once on modal load to initialize correct variant
    updateVariant();
  }
</script>

{% schema %}
{
  "name": "EE Quick View Modal",
  "limit": 1,
  "settings": [
    {
      "type": "checkbox",
      "id": "title",
      "label": "Text"
    }
  ],
  "presets": [
    {
      "name": "EE Quick View Modal",
      "settings": {
        "title": "Quick View Modal"
      }
    }
  ],
  "enabled_on": {
    "templates": ["*"]
  }
}
{% endschema %}
